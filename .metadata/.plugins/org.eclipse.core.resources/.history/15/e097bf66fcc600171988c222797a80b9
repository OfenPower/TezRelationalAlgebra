package de.bachd.bigdata;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.LogicalInput;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueReader;
import org.apache.tez.runtime.library.api.KeyValueWriter;

import com.google.common.base.Preconditions;
import com.google.common.base.Splitter;

/**
 * TableProcessor hat 2 Inputs:
 * 
 * - Output von SchemeProcessor in der Form (null, column)
 * 
 * - Input der .csv Datei (Tupel der Tabelle)
 */

public class TableProcessor extends SimpleMRProcessor {

	private static final String SCHEMEPROCESSOR = "SchemeProcessor";

	public TableProcessor(ProcessorContext context) {
		super(context);
	}

	/*
	 * @Override public void preOp() throws Exception { super.preOp();
	 * 
	 * /* // Knoten blockieren, solange Schema noch nicht gelesen wurde
	 * LogicalInput schemeInput = getInputs().get(App.V2); ArrayList<Input>
	 * blockingInputs = new ArrayList<>(); blockingInputs.add(schemeInput);
	 * getContext().waitForAllInputsReady(blockingInputs);
	 *
	 * }
	 */

	@Override
	public void run() throws Exception {
		Preconditions.checkState(getInputs().size() == 2);
		Iterator<LogicalInput> kvReaderItr = getInputs().values().iterator();
		KeyValueReader kvSchemeReader = null;
		KeyValueReader kvDataReader = null;
		KeyValueWriter kvTableWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();
		while (kvReaderItr.hasNext()) {
			// erster Mapeintrag ist DATAINPUT, wurde mit .addDataSource()
			// eingetragen
			kvDataReader = (KeyValueReader) kvReaderItr.next().getReader();
			kvSchemeReader = (KeyValueReader) kvReaderItr.next().getReader();
		}
		// Schema lesen, Daten als String lesen, splitten und als Tuple
		// speichern
		if (kvSchemeReader.next()) {
			Scheme scheme = (Scheme) kvSchemeReader.getCurrentKey();
			while (kvDataReader.next()) {
				String row = kvDataReader.getCurrentValue().toString();
				Iterable<String> values = Splitter.on('\t').trimResults().omitEmptyStrings().split(row);
				List<Text> textValues = new ArrayList<Text>();
				for (String s : values) {
					textValues.add(new Text(s));
				}
				Text[] textArray = new Text[textValues.size()];
				textArray = textValues.toArray(textArray);
				Tuple t = new Tuple();
				t.addValues(textArray);
				NullWritable nullKey = NullWritable.get();
				kvTableWriter.write(nullKey, t);
			}
		}

	}

	@Override
	public void initialize() throws Exception {
		System.out.println("Initialize TableProcessor");
	}
}
