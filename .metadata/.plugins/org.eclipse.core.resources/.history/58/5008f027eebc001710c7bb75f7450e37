package de.bachd.bigdata;

import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.tez.client.TezClient;
import org.apache.tez.dag.api.DAG;
import org.apache.tez.dag.api.DataSinkDescriptor;
import org.apache.tez.dag.api.DataSourceDescriptor;
import org.apache.tez.dag.api.Edge;
import org.apache.tez.dag.api.EdgeProperty;
import org.apache.tez.dag.api.EdgeProperty.DataMovementType;
import org.apache.tez.dag.api.EdgeProperty.DataSourceType;
import org.apache.tez.dag.api.EdgeProperty.SchedulingType;
import org.apache.tez.dag.api.InputDescriptor;
import org.apache.tez.dag.api.OutputDescriptor;
import org.apache.tez.dag.api.ProcessorDescriptor;
import org.apache.tez.dag.api.TezConfiguration;
import org.apache.tez.dag.api.TezException;
import org.apache.tez.dag.api.Vertex;
import org.apache.tez.mapreduce.input.MRInput;
import org.apache.tez.mapreduce.output.MROutput;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
import org.apache.tez.runtime.library.conf.OrderedPartitionedKVEdgeConfig;
import org.apache.tez.runtime.library.partitioner.HashPartitioner;
import org.apache.tez.runtime.library.processor.SimpleProcessor;

/**
 * Hello World!
 *
 */
public class AppTest extends Configured implements Tool {

	public static class DataProcessor extends SimpleProcessor {

		public DataProcessor(ProcessorContext context) {
			super(context);
		}

		@Override
		public void run() throws Exception {
			for (int i = 0; i < 5; i++) {
				System.out.println("DataProcessor run()");
			}
		}
	}

	public static class SchemeProcessor extends SimpleProcessor {

		public SchemeProcessor(ProcessorContext context) {
			super(context);
		}

		@Override
		public void run() throws Exception {
			for (int i = 0; i < 5; i++) {
				System.out.println("SchemeProcessor run()");
			}
		}

	}

	@Override
	public int run(String[] args) throws Exception {
		// Tez lokal aufsetzen
		TezConfiguration tezConf = new TezConfiguration(getConf());
		tezConf.setBoolean(TezConfiguration.TEZ_LOCAL_MODE, true);
		tezConf.set("fs.default.name", "file:///");
		tezConf.setBoolean(TezRuntimeConfiguration.TEZ_RUNTIME_OPTIMIZE_LOCAL_FETCH, true);

		// TezClient starten
		TezClient tezClient = TezClient.create("TezClient", tezConf);
		tezClient.start();

		return runJob(args, tezConf, tezClient);
	}

	private int runJob(String[] args, TezConfiguration tezConf, TezClient tezClient) throws TezException, IOException {
		// Datasource
		DataSourceDescriptor dataSource1 = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, "artikel.csv").build();
		DataSourceDescriptor dataSource2 = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, "artikel.scheme").build();
		DataSinkDescriptor dataSink1 = MROutput
				.createConfigBuilder(new Configuration(tezConf), TextOutputFormat.class, "output.csv").build();

		// Knoten erzeugen
		Vertex v1 = Vertex.create("v1", ProcessorDescriptor.create(DataProcessor.class.getName()));
		v1.addDataSource("artikel.csv", dataSource1);
		Vertex v2 = Vertex.create("v2", ProcessorDescriptor.create(SchemeProcessor.class.getName()));
		v2.addDataSource("artikel.csv", dataSource2);
		v2.addDataSink("output", dataSink1);

		// Edge erzeugen
		OrderedPartitionedKVEdgeConfig e1Config = OrderedPartitionedKVEdgeConfig
				.newBuilder(Text.class.getName(), Text.class.getName(), HashPartitioner.class.getName())
				.setFromConfiguration(tezConf).build();
		Edge e1 = Edge.create(v1, v2, e1Config.createDefaultEdgeProperty());

		Edge e2 = Edge.create(v1, v2,
				EdgeProperty.create(DataMovementType.SCATTER_GATHER, DataSourceType.PERSISTED,
						SchedulingType.SEQUENTIAL, OutputDescriptor.create(DataProcessor.class.getName()),
						InputDescriptor.create(SchemeProcessor.class.getName())));

		// Graph erzeugen
		DAG dag = DAG.create("dag");
		dag.addVertex(v1).addVertex(v2).addEdge(e2);
		tezClient.submitDAG(dag);

		return 0;
	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new Configuration(), new AppTest(), args);
	}
}
