package de.bachd.bigdata.tez;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import de.bachd.bigdata.predicate.DoubleComparable;
import de.bachd.bigdata.predicate.IntegerComparable;
import de.bachd.bigdata.predicate.PredicateComparable;
import de.bachd.bigdata.predicate.StringComparable;

/**
 * ToDo: Eventuell Attribut mitf√ºhren, mit welchen Relationen das Tupel gejoined
 * wurde!
 */

public class Tuple implements Writable<Tuple> {

	private List<String> attributeNames;
	private List<String> attributeDomains;
	private List<String> attributeValues;

	public Tuple() {
		this.attributeNames = new ArrayList<>();
		this.attributeDomains = new ArrayList<>();
		this.attributeValues = new ArrayList<>();
	}

	public static Tuple copyTuple(Tuple tuple) {
		List<String> names = tuple.getAttributeNames();
		List<String> domains = tuple.getAttributeDomains();
		List<String> values = tuple.getAttributeValues();
		Tuple t = new Tuple();
		t.set(names, domains, values);
		return t;
	}

	public void set(List<String> names, List<String> domains, List<String> values) {
		this.attributeNames = names;
		this.attributeDomains = domains;
		this.attributeValues = values;
	}

	public List<String> getAttributeNames() {
		List<String> attributeNamesCopy = new ArrayList<>();
		for (String s : this.attributeNames) {
			attributeNamesCopy.add(s);
		}
		return attributeNamesCopy;
	}

	public List<String> getAttributeDomains() {
		List<String> attributeDomainsCopy = new ArrayList<>();
		for (String s : this.attributeDomains) {
			attributeDomainsCopy.add(s);
		}
		return attributeDomainsCopy;
	}

	public List<String> getAttributeValues() {
		List<String> attributeValuesCopy = new ArrayList<>();
		for (String s : this.attributeValues) {
			attributeValuesCopy.add(s);
		}
		return attributeValuesCopy;
	}

	public Map<String, String> getColumnStringMap() {
		Map<String, String> map = new HashMap<>();
		for (int i = 0; i < attributeNames.size(); i++) {
			map.put(attributeNames.get(i), attributeValues.get(i));
		}
		return map;
	}

	public Map<String, PredicateComparable> getColumnComparableMap() {
		Map<String, PredicateComparable> map = new HashMap<>();
		for (int i = 0; i < attributeNames.size(); i++) {
			String value = attributeValues.get(i);
			if (attributeDomains.get(i).equals("Integer")) {
				IntegerComparable ic = new IntegerComparable(Integer.parseInt(value));
				map.put(attributeNames.get(i), ic);
			} else if (attributeDomains.get(i).equals("String")) {
				StringComparable sc = new StringComparable(value);
				map.put(attributeNames.get(i), sc);
			} else if (attributeDomains.get(i).equals("Double")) {
				DoubleComparable dc = new DoubleComparable(Double.parseDouble(value));
				map.put(attributeNames.get(i), dc);
			}
		}
		return map;
	}

	public void printColumnValues() {
		for (int i = 0; i < attributeNames.size(); i++) {
			System.out.print(attributeNames.get(i) + "\t");
		}
		System.out.println();
		for (int i = 0; i < attributeValues.size(); i++) {
			System.out.print(attributeValues.get(i) + "\t");
		}
		System.out.println();
	}

	@Override
	public void readFields(DataInput in) throws IOException {
		// Listen deserialisieren
		// ----------------------
		// AttributeNames
		int nameSize = in.readInt();
		this.attributeNames = new ArrayList<>();
		for (int i = 0; i < nameSize; i++) {
			String s = in.readUTF();
			this.attributeNames.add(s);
		}
		// AttributeDomains
		int domainSize = in.readInt();
		this.attributeDomains = new ArrayList<>();
		for (int i = 0; i < domainSize; i++) {
			String s = in.readUTF();
			this.attributeDomains.add(s);
		}
		// AttributeValues
		int valueSize = in.readInt();
		this.attributeValues = new ArrayList<>();
		for (int i = 0; i < valueSize; i++) {
			String s = in.readUTF();
			this.attributeValues.add(s);
		}
		// ----------------------
	}

	@Override
	public void write(DataOutput out) throws IOException {
		// Listen serialisieren
		// --------------------
		// AttributeNames
		out.writeInt(this.attributeNames.size());
		for (int i = 0; i < this.attributeNames.size(); i++) {
			out.writeUTF(this.attributeNames.get(i));
		}
		// AttributeDomains
		out.writeInt(this.attributeDomains.size());
		for (int i = 0; i < this.attributeDomains.size(); i++) {
			out.writeUTF(this.attributeDomains.get(i));
		}
		// AttributeValues
		out.writeInt(this.attributeValues.size());
		for (int i = 0; i < this.attributeValues.size(); i++) {
			out.writeUTF(this.attributeValues.get(i));
		}
		// ----------------------
	}

	@Override
	public int compareTo(Tuple obj) {
		System.out.println("Compare");
		/*
		 * if (this.hashCode() < obj.hashCode()) { return -1; } else { return 1;
		 * }
		 */
		Map<String, String> map1 = getColumnStringMap();
		Map<String, String> map2 = getColumnStringMap();
		Integer int1 = Integer.parseInt(map1.get("ArtNr"));
		Integer int2 = Integer.parseInt(map2.get("ArtNr"));
		return int1.compareTo(int2);
	}

	@Override
	public int hashCode() {
		return this.attributeValues.hashCode();
	}

}
