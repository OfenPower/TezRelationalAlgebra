package de.bachd.bigdata.tez;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.Text;
import org.apache.tez.common.TezUtils;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueWriter;
import org.apache.tez.runtime.library.api.KeyValuesReader;
import org.apache.tez.runtime.library.processor.SimpleProcessor;

import com.google.common.base.Splitter;

import de.bachd.bigdata.aggregation.AggregationStrategy;
import de.bachd.bigdata.aggregation.CountStrategy;
import de.bachd.bigdata.aggregation.SumStrategy;
import de.bachd.bigdata.utils.Pair;

public class AggregationProcessor extends SimpleProcessor {

	private List<Pair<AggregationStrategy, String>> aggregateFunctions;
	private List<String> aggregateFunctionNames;

	public AggregationProcessor(ProcessorContext context) {
		super(context);
		aggregateFunctions = new ArrayList<>();
		aggregateFunctionNames = new ArrayList<>();
	}

	@Override
	public void run() throws Exception {
		KeyValuesReader kvsReader = (KeyValuesReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter kvWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();
		while (kvsReader.next()) {
			Text key = (Text) kvsReader.getCurrentKey();
			// Schema des Tupels speichern. Am Ende der Aggregation wird ein
			// neues Tupel mit diesem Schema plus neuer Spalten für
			// Aggregatfunktion (mit Ergebnis) erzeugt
			boolean schemeRead = false;
			List<String> relationNames = null;
			List<String> attributeNames = null;
			List<String> attributeDomains = null;
			List<String> attributeValues = new ArrayList<>();
			// Alle gruppierten Tupel holen. Jedes dieser gruppierten Tuple
			// lässt sich durch den kvsReader nur einmal anfordern, daher muss
			// jedes angeforderte Tupel direkt durch alle Aggregatfunktionen
			// geschickt werden!
			for (Object obj : kvsReader.getCurrentValues()) {
				Tuple t = (Tuple) obj;
				if (!schemeRead) {
					relationNames = t.getRelationNames();
					attributeNames = t.getAttributeNames();
					attributeDomains = t.getAttributeDomains();
					schemeRead = true;
				}
				Map<String, String> valueMap = t.getColumnStringMap();
				// Jedes Tupel dieser Gruppe durch alle Aggregatfunktionen
				// schicken und jeweilige AttributeValues aggregieren!
				for (Pair<AggregationStrategy, String> pair : aggregateFunctions) {
					AggregationStrategy aggregate = pair.getLeft();
					aggregate.add(valueMap.get(pair.getRight()));
				}
			}
			// groupByKey splitten, Values entnehmen und zu attributeValues
			// hinzufügen
			Iterable<String> groupByKeyItr = Splitter.on(',').trimResults().omitEmptyStrings().split(key.toString());
			for (String s : groupByKeyItr) {
				attributeValues.add(s);
			}

			// Ergebnis der verschiedenen Aggregationen holen.
			// Nachdem der Wert jedes Tupels der Gruppe mit der jeweiligen
			// AggregationStrategy aggregiert wurde, müssen die aggregierten
			// Werte für die nächste Gruppe wieder zurückgesetzt werden!
			for (Pair<AggregationStrategy, String> pair : aggregateFunctions) {
				AggregationStrategy aggregate = pair.getLeft();
				Object aggregatedValue = aggregate.getValue();
				System.out.println(key + "  aggregated Value: " + aggregate.getValue());
				aggregate.setNeutral();
				// Neuer Spaltenname der Form "aggFunc(attribute)"
				attributeNames.add(aggregate.getAggregateFunctionName() + "(" + pair.getLeft() + ")");
				attributeValues.add("" + aggregatedValue);
			}

			for (String func : this.aggregateFunctionNames) {
				attributeNames.add(func);
				attributeDomains.add(aggregate.getResultDomain());

			}

			// Ergebnistuple erzeugen.
			// Aggregatfunktionen mit Ergebnis als zusätzliche Spalte einfügen

			Tuple aggregatedTuple = new Tuple();
			aggregatedTuple.set(relationNames, attributeNames, attributeDomains, attributeValues);

			System.out.println("---------------");

		}

		// ToDo!!!!
		// ------------------
		// Neue Tupel erzeugen, welche als AttributeName den Ausdruck
		// "aggFunction(attributeName)" erhalten! Diese Tupel dann an den
		// ProjectionProcessor weiterleiten!

	}

	@Override
	public void initialize() throws Exception {
		System.out.println("Initialize AggregationProcessor");
		UserPayload up = getContext().getUserPayload();
		Configuration conf = TezUtils.createConfFromUserPayload(up);
		String aggregateFunctions = conf.get("AggregateFunctions");
		System.out.println("Aggregate-Functions: " + aggregateFunctions);
		Iterable<String> aggregateFunctionsItr = Splitter.on(',').trimResults().omitEmptyStrings()
				.split(aggregateFunctions);

		// Pair erzeugen: Left = aggregateFunction, Right = Attribut welches
		// aggregiert werden soll
		SumStrategy sumStrategy = new SumStrategy();
		CountStrategy countStrategy = new CountStrategy();
		Pair<AggregationStrategy, String> pair1 = new Pair<>(sumStrategy, "liegen.Bestand");
		Pair<AggregationStrategy, String> pair2 = new Pair<>(countStrategy, "liegen.Bestand");
		this.aggregateFunctions.add(pair1);
		this.aggregateFunctions.add(pair2);
		this.aggregateFunctionNames.add("sum(liegen.Bestand)");
		this.aggregateFunctionNames.add("count(liegen.Bestand)");
	}

}
