package de.bachd.bigdata;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.io.ArrayWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.WritableComparable;

public class Tuple implements WritableComparable<Tuple> {

	private ArrayWritable attributeNames;
	private ArrayWritable attributeDomains;
	private ArrayWritable attributeValues;

	public Tuple() {
		attributeNames = new ArrayWritable(Text.class);
		attributeDomains = new ArrayWritable(Text.class);
		attributeValues = new ArrayWritable(Text.class);
	}

	public void setElements(Text[] attributeNames, Text[] attributeDomains, Text[] attributeValues) {
		this.attributeNames.set(attributeNames);
		this.attributeDomains.set(attributeDomains);
		this.attributeValues.set(attributeValues);
	}

	public List<String> getAttributeNames() {
		// Text-Elemente einzeln casten, da von Writable[] nicht auf
		// List<Text> gecastet werden kann
		Writable[] w = this.attributeNames.get();
		ArrayList<String> l = new ArrayList<>();
		for (int i = 0; i < w.length; i++) {
			String s = ((Text) w[i]).toString();
			l.add(s);
		}
		return l;
	}

	public List<String> getAttributeDomains() {
		// Text-Elemente einzeln casten, da von Writable[] nicht auf
		// List<Text> gecastet werden kann
		Writable[] w = this.attributeDomains.get();
		ArrayList<String> l = new ArrayList<>();
		for (int i = 0; i < w.length; i++) {
			String s = ((Text) w[i]).toString();
			l.add(s);
		}
		return l;
	}

	public List<String> getAttributeValues() {
		// Text-Elemente einzeln casten, da von Writable[] nicht auf
		// List<Text> gecastet werden kann
		Writable[] w = this.attributeValues.get();
		ArrayList<String> l = new ArrayList<>();
		for (int i = 0; i < w.length; i++) {
			String s = ((Text) w[i]).toString();
			l.add(s);
		}
		return l;
	}

	public Map<String, String> getColumnMap() {
		List<String> columns = getAttributeNames();
		List<String> values = getAttributeValues();
		Map<String, String> map = new HashMap<>();
		for (int i = 0; i < columns.size(); i++) {
			map.put(columns.get(i), values.get(i));
		}
		return map;
	}

	@Override
	public void readFields(DataInput in) throws IOException {
		attributeNames.readFields(in);
		attributeDomains.readFields(in);
		attributeValues.readFields(in);
	}

	@Override
	public void write(DataOutput out) throws IOException {
		attributeNames.write(out);
		attributeDomains.write(out);
		attributeValues.write(out);
	}

	@Override
	public int compareTo(Tuple obj) {
		return 0;
	}

}
