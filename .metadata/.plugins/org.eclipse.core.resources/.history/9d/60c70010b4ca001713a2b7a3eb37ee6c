package de.bachd.bigdata;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueReader;
import org.apache.tez.runtime.library.api.KeyValueWriter;

import com.google.common.base.Preconditions;

public class ProjectionProcessor extends SimpleMRProcessor {

	private List<String> projectionList;

	public ProjectionProcessor(ProcessorContext context) {
		super(context);
		projectionList = new ArrayList<>();
		// projectionList.add("*");
		// projectionList.add("ArtNr");
		projectionList.add("ArtName");
		projectionList.add("ArtPreis");
	}

	@Override
	public void run() throws Exception {
		Preconditions.checkState(getInputs().size() == 1);
		Preconditions.checkState(getOutputs().size() == 1);
		KeyValueReader kvReader = (KeyValueReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter kvWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();
		while (kvReader.next()) {
			Tuple tuple = (Tuple) kvReader.getCurrentKey();
			Text projectedValues = null;
			// SELECT * FROM
			if (projectionList.contains("*")) {
				// Alle Values rausschreiben
				List<String> valueList = tuple.getAttributeValues();
				StringBuilder values = new StringBuilder("");
				for (int i = 0; i < valueList.size(); i++) {
					if (i != valueList.size() - 1) {
						values.append(valueList.get(i)).append("\t");
					} else {
						values.append(valueList.get(i));
					}
				}
				projectedTuple = new Text(values.toString());

			} else {
				// SELECT a, b FROM
				Map<String, String> columnMap = tuple.getColumnMap();
				StringBuilder values = new StringBuilder("");
				for (int i = 0; i < projectionList.size(); i++) {
					// Projektionsattribut aus Liste holen
					String column = projectionList.get(i);
					if (i != projectionList.size() - 1) {
						// Value fÃ¼r dieses Attribut rausschreiben
						values.append(columnMap.get(column)).append("\t");
					} else {
						values.append(columnMap.get(column));
					}
				}
				projectedTuple = new Text(values.toString());
			}

			// Projezierte Tupel rausschreiben
			NullWritable nullValue = NullWritable.get();
			kvWriter.write(projectedTuple, nullValue);
		}
	}

	@Override
	public void initialize() {
		System.out.println("Initialize ProjectionProcessor");
	}

}
