package de.bachd.bigdata.tez;

import org.apache.hadoop.io.Text;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueWriter;
import org.apache.tez.runtime.library.api.KeyValuesReader;
import org.apache.tez.runtime.library.processor.SimpleProcessor;

import de.bachd.bigdata.aggregate.CountAggregate;

public class AggregateProjectionProcessor extends SimpleProcessor {

	private boolean receivesGroupedTuples;

	public AggregateProjectionProcessor(ProcessorContext context) {
		super(context);
	}

	@Override
	public void run() throws Exception {
		KeyValuesReader kvsReader = (KeyValuesReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter kvWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();
		while (kvsReader.next()) {
			Text key = (Text) kvsReader.getCurrentKey();
			CountAggregate agg = new CountAggregate().getNeutralElement();
			for (Object obj : kvsReader.getCurrentValues()) {
				Tuple t = (Tuple) obj;
				agg.add(new CountAggregate());
			}
			System.out.println(key + "  count: " + agg.getValue());
		}

	}

	@Override
	public void initialize() throws Exception {
		System.out.println("Initialize AggregateProjectionProcessor");
		boolean groupedTuples = conf.getBoolean("GroupedTuples", false);
	}

}
