package de.bachd.bigdata;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.tez.common.TezUtils;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.runtime.api.LogicalInput;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueReader;
import org.apache.tez.runtime.library.api.KeyValueWriter;
import org.apache.tez.runtime.library.processor.SimpleProcessor;

import com.google.common.base.Splitter;

/**
 * Der HashJoinProcessor implementiert einen Equi-Join der folgenden Form:
 * 
 * "R join S on R.A = S.A
 *
 */

public class HashJoinProcessor extends SimpleProcessor {

	private List<String> joinAttributes;

	public HashJoinProcessor(ProcessorContext context) {
		super(context);
		joinAttributes = new ArrayList<>();
	}

	@Override
	public void run() throws Exception {
		// Check, ob 2 Inputs und 1 Output vorhanden ist
		// KeyValueReader und Writer initialisieren
		KeyValueReader kvReader1 = null;
		KeyValueReader kvReader2 = null;
		Iterator<LogicalInput> kvReaderItr = getInputs().values().iterator();
		while (kvReaderItr.hasNext()) {
			kvReader1 = (KeyValueReader) kvReaderItr.next().getReader();
			kvReader2 = (KeyValueReader) kvReaderItr.next().getReader();
		}
		KeyValueWriter kvWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();

		// Herausfinden, welcher Reader welche Tupel enth√§lt. Hierzu wird das erste JoinAttribut der Form "Relation.Column"  
		String relationName = Splitter.on('.').trimResults().omitEmptyStrings().split(joinAttributes.get(0)).iterator()
				.next();
		if (kvReader1.next()) {
			Tuple t = (Tuple) kvReader1.getCurrentKey();

			if (relationName.equals(t.getRelationName())) {
				System.out.println("artikel-Tuple found");
			} else {
				System.out.println("liegen-Tuple found");
			}

			System.out.println(t.getColumnValueStringMap().get("ArtNr"));
		}

		// Alle Tupel aus Reader1 in HashMap schreiben

		/*
		 * while (kvReader1.next()) { Tuple t = (Tuple)
		 * kvReader1.getCurrentKey(); NullWritable nullValue =
		 * NullWritable.get(); kvWriter.write(t, nullValue); }
		 */

	}

	@Override
	public void initialize() throws IOException {
		System.out.println("Initialize HashJoinProcessor");
		UserPayload up = getContext().getUserPayload();
		Configuration conf = TezUtils.createConfFromUserPayload(up);
		String attributes = conf.get("JoinAttribute");
		System.out.println("Join on: " + attributes);
		Iterable<String> attrItr = Splitter.on('=').trimResults().omitEmptyStrings().split(attributes);
		for (String attr : attrItr) {
			joinAttributes.add(attr);
		}

	}

}
