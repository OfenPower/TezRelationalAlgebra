package de.bachd.bigdata.tez;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.tez.common.TezUtils;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueReader;
import org.apache.tez.runtime.library.api.KeyValueWriter;
import org.apache.tez.runtime.library.api.KeyValuesReader;

import com.google.common.base.Splitter;

import de.bachd.bigdata.aggregate.CountAggregate;

/**
 * Erhält Tuple und projeziert diese auf angegebene Attribute. Schreibt Die
 * Ergebniswerte als Datei raus.
 * 
 * ToDo: Excezption werfen, wenn zu projezierendes Attribut nicht in ColumnMap
 * existiert?
 *
 */
public class ProjectionProcessor extends SimpleMRProcessor {

	private List<String> projectionList;
	private boolean receivesGroupedTuples;

	public ProjectionProcessor(ProcessorContext context) {
		super(context);
		projectionList = new ArrayList<>();
	}

	@Override
	public void run() throws Exception {
		// Die Projektion funktioniert anders, wenn gruppierte Tupel durch den
		// GroupByProcessor ankommen. Daher wird hier verzweigt!
		if (this.receivesGroupedTuples) {
			System.out.println("ProjectGroupedTuples");
			projectGroupedTuples();
		} else {
			System.out.println("ProjectUngroupedTuples");
			projectUngroupedTuples();
		}
	}

	private void projectUngroupedTuples() throws Exception {
		KeyValueReader kvReader = (KeyValueReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter kvWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();
		while (kvReader.next()) {
			Tuple tuple = (Tuple) kvReader.getCurrentKey();
			Text projectedValues = null;
			// SELECT * FROM
			if (projectionList.contains("*")) {
				// Alle Values rausschreiben
				List<String> valueList = tuple.getAttributeValues();
				StringBuilder values = new StringBuilder("");
				for (int i = 0; i < valueList.size(); i++) {
					if (i != valueList.size() - 1) {
						values.append(valueList.get(i)).append("\t");
					} else {
						values.append(valueList.get(i));
					}
				}
				projectedValues = new Text(values.toString());
			} else {
				// SELECT a, b FROM
				// tuple.printColumnValues();
				Map<String, String> columnMap = tuple.getColumnStringMap();
				StringBuilder values = new StringBuilder("");
				for (int i = 0; i < projectionList.size(); i++) {
					// Projektionsattribut aus Liste holen
					String column = projectionList.get(i);
					if (i != projectionList.size() - 1) {
						// Nur Value für dieses Attribut rausschreiben
						values.append(columnMap.get(column)).append("\t");
					} else {
						values.append(columnMap.get(column));
					}
				}
				projectedValues = new Text(values.toString());
			}
			// Projezierte Tupel rausschreiben
			NullWritable nullValue = NullWritable.get();
			kvWriter.write(projectedValues, nullValue);
		}
	}

	private void projectGroupedTuples() throws Exception {
		KeyValuesReader kvsReader = (KeyValuesReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter kvWriter = (KeyValueWriter) getOutputs().values().iterator().next().getWriter();
		while (kvsReader.next()) {
			Text key = (Text) kvsReader.getCurrentKey();
			CountAggregate agg = new CountAggregate().getNeutralElement();
			for (Object obj : kvsReader.getCurrentValues()) {
				Tuple t = (Tuple) obj;
				agg.add(new CountAggregate());
			}
			System.out.println(key + "  count: " + agg.getValue());
		}

	}

	@Override
	public void initialize() throws IOException {
		System.out.println("Initialize ProjectionProcessor");

		// UserPayload in Configuration konvertieren und Projektionsattribute
		// holen
		UserPayload up = getContext().getUserPayload();
		Configuration conf = TezUtils.createConfFromUserPayload(up);
		String projection = conf.get("Projection");
		boolean groupedTuples = conf.getBoolean("GroupedTuples", false);
		// Projektionsattribute splitten und einzeln der Projektionsliste
		// hinzufügen.
		Iterable<String> projItr = Splitter.on(',').trimResults().omitEmptyStrings().split(projection);
		for (String s : projItr) {
			projectionList.add(s);
		}
		// Kommen gruppierte Tuple an? Wenn ja => KeyValuesReader statt
		// KeyValueReader verwenden!
		this.receivesGroupedTuples = groupedTuples;
		// DEBUG Projektionsattribute anzeigen
		System.out.println("Projektion auf: " + projection);
		System.out.println("Tupel sind gruppiert: " + groupedTuples);
	}

}
