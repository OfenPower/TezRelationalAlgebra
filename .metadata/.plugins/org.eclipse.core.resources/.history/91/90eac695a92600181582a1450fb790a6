package de.bachd.bigdata.tez;

import java.io.IOException;
import java.util.List;
import java.util.Queue;

import org.apache.hadoop.conf.Configuration;
import org.apache.tez.dag.api.DAG;
import org.apache.tez.dag.api.TezConfiguration;
import org.apache.tez.dag.api.TezException;

import com.google.common.base.CharMatcher;
import com.google.common.base.Splitter;
import com.google.common.collect.Lists;

public class DAGBuilder {

	Configuration projectionConfiguration = new Configuration();
	Configuration aggregationConfiguration = new Configuration();
	Configuration selectionConfiguration = new Configuration();

	public static DAG buildDAGFromString(String query, TezConfiguration tezConf) throws TezException, IOException {
		initializeConfigurations(query);
		return null;
	}

	private static void initializeConfigurations(String query) throws TezException, IOException {
		List<String> queryParts = Lists.newArrayList(Splitter.on("\n").trimResults().omitEmptyStrings().split(query));
		for (String s : queryParts) {
			if (s.startsWith("SELECT")) {
				setProjectionAndAggregationConfiguration(s);
			}
			if (s.startsWith("FROM")) {
				System.out.println("FROM");
			}
			if (s.startsWith("WHERE")) {
				System.out.println("WHERE");
			}
		}
	}

	private void deprecatedFunction() {
		// Query in 5 Bestandteile aufsplitten:
		// -------------------------------------
		// SELECT a, b, f(c)
		// FROM r JOIN s ON r.a = s.a
		// [...]
		// WHERE P1
		// GROUP BY a, b
		// -------------------------------------

		System.out.println("----------QueueStart----------");
		Queue<String> queryPartQueue = null;
		// Queues.newArrayDeque(Splitter.on('\n').trimResults().omitEmptyStrings().split(query));
		while (!queryPartQueue.isEmpty()) {
			String queryPart = queryPartQueue.poll();
			// PROJEKTION
			if (queryPart.startsWith("SELECT")) {
				setProjectionAndAggregationConfiguration(queryPart);
			}

			// FROM

			// JOIN

			// SELEKTION
			if (queryPart.startsWith("WHERE")) {
				setSelectionConfiguration(queryPart);
			}

			// GROUP BY

		}
		System.out.println("----------QueueEnd----------");

		List<String> queryParts = Lists.newArrayList(Splitter.on('\n').trimResults().omitEmptyStrings().split(query));
		// for (int i = 0; i < queryParts.size(); i++) {
		// System.out.println(queryParts.get(i));
		// if (!queryParts.get(0).startsWith("SELECT")) {
		// throw new IllegalArgumentException("query muss mit SELECT
		// beginnen!");
		// } else {
		// setProjectionAndAggregationConfiguration(queryParts.get(0));
		// }
		// }

		// setProjectionAndAggregationConfiguration(queryParts.get(0));
		// setSelectionConfiguration(queryParts.get(3));
		// setGroupByConfiguration(queryParts.get(4));

		return 0;
	}

	private static void setProjectionAndAggregationConfiguration(String queryPart) {
		System.out.println("---- setProjectionAndAggregationConfiguration ----");
		// ProjectionConfiguration
		//
		List<String> queryParts01 = Lists
				.newArrayList(Splitter.on(' ').trimResults().omitEmptyStrings().limit(2).split(queryPart));
		System.out.println(queryParts01.get(1));
		this.projectionConfiguration.set("Projection", queryParts01.get(1));
		// AggregationConfiguration
		//
		List<String> queryParts02 = Lists.newArrayList(Splitter.on(CharMatcher.anyOf(" ").or(CharMatcher.anyOf(", ")))
				.trimResults().omitEmptyStrings().split(queryPart));
		// Aggregatfunktionen im SELECT-Statement erkennt man an einer Ã¶ffnenden
		// Klammer!
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i < queryParts02.size(); i++) {
			if (queryParts02.get(i).contains("(")) {
				sb.append(queryParts02.get(i));
				sb.append(", ");
			}
		}
		sb.delete(sb.length() - 2, sb.length());
		System.out.println(sb.toString());
		this.aggregationConfiguration.set("AggregateFunctions", sb.toString());
	}

	private void setSelectionConfiguration(String queryPart) {
		System.out.println("---- setSelectionConfiguration ----");
		List<String> queryParts = Lists
				.newArrayList(Splitter.on(' ').trimResults().omitEmptyStrings().limit(2).split(queryPart));
		System.out.println(queryParts.get(1));
		selectionConfiguration.set("SelectionPredicate", queryParts.get(1));
	}

	/*
	 * private void setGroupByConfiguration(String queryPart) {
	 * System.out.println("---- setGroupByConfiguration ----"); List<String>
	 * queryParts = Lists .newArrayList(Splitter.on('
	 * ').trimResults().omitEmptyStrings().limit(3).split(queryPart));
	 * System.out.println(queryParts.get(2));
	 * this.groupByConfiguration.set("GroupByAttributes", queryParts.get(2)); }
	 */

}
