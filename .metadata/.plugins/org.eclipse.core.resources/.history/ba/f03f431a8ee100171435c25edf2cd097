package de.bachd.bigdata.tez;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.tez.client.TezClient;
import org.apache.tez.common.TezUtils;
import org.apache.tez.dag.api.DAG;
import org.apache.tez.dag.api.DataSinkDescriptor;
import org.apache.tez.dag.api.DataSourceDescriptor;
import org.apache.tez.dag.api.Edge;
import org.apache.tez.dag.api.ProcessorDescriptor;
import org.apache.tez.dag.api.TezConfiguration;
import org.apache.tez.dag.api.TezException;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.dag.api.Vertex;
import org.apache.tez.dag.api.client.DAGClient;
import org.apache.tez.dag.api.client.DAGStatus;
import org.apache.tez.mapreduce.input.MRInput;
import org.apache.tez.mapreduce.output.MROutput;
import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;
import org.apache.tez.runtime.library.conf.OrderedPartitionedKVEdgeConfig;
import org.apache.tez.runtime.library.conf.UnorderedKVEdgeConfig;
import org.apache.tez.runtime.library.partitioner.HashPartitioner;

import com.google.common.base.CharMatcher;
import com.google.common.base.Splitter;
import com.google.common.collect.Lists;

/**
 * Hello World!
 *
 */
public class App extends Configured implements Tool {

	public static final String ARTIKELDATAINPUT = "ArtikelDataInput";
	public static final String ARTIKELSCHEMEINPUT = "ArtikelSchemeInput";
	public static final String LIEGENDATAINPUT = "LiegenDataInput";
	public static final String LIEGENSCHEMEINPUT = "LiegenSchemeInput";
	public static final String RESULTOUTPUT = "ResultOutput";
	public static final String ARTIKELTABLEPROCESSOR = "ArtikelTableProcessor";
	public static final String ARTIKELSCHEMEPROCESSOR = "ArtikelSchemeProcessor";
	public static final String LIEGENTABLEPROCESSOR = "LiegenTableProcessor";
	public static final String LIEGENSCHEMEPROCESSOR = "LiegenSchemeProcessor";
	public static final String HASHJOINPROCESSOR = "HashJoinProcessor";
	public static final String SELECTIONPROCESSOR = "SelectionProcessor";
	public static final String GROUPBYPROCESSOR = "GroupByProcessor";
	public static final String PROJECTIONPROCESSOR = "ProjectionProcessor";
	public static final String AGGREGATIONPROCESSOR = "AggregationProcessor";

	@Override
	public int run(String[] args) throws Exception {
		// Tez lokal aufsetzen
		TezConfiguration tezConf = new TezConfiguration(getConf());
		tezConf.setBoolean(TezConfiguration.TEZ_LOCAL_MODE, true);
		tezConf.set("fs.default.name", "file:///");
		tezConf.setBoolean(TezRuntimeConfiguration.TEZ_RUNTIME_OPTIMIZE_LOCAL_FETCH, true);

		// TezClient starten
		TezClient tezClient = TezClient.create("TezClient", tezConf);
		tezClient.start();

		String query = "SELECT artikel.ArtNr, artikel.ArtName, count(liegen.LagerNr), sum(liegen.Bestand)\n"
				+ "FROM artikel\n " + "JOIN liegen ON artikel.ArtNr = liegen.ArtNr\n "
				+ "WHERE artikel.ArtNr != 1003\n " + "GROUP BY artikel.ArtNr, artikel.ArtName\n ";

		return runTezJob(query, tezConf, tezClient);
	}

	private int runTezJob(String query, TezConfiguration tezConf, TezClient tezClient)
			throws TezException, IOException {

		// Query in 5 Bestandteile aufsplitten:
		// -------------------------------------
		// SELECT a, b, f(c)
		// FROM r JOIN s ON r.a = s.a
		// [...]
		// WHERE P1
		// GROUP BY a, b
		// -------------------------------------

		// Listen von Configurationsobjekten erzeugen
		List<Configuration> joinConfigurations = new ArrayList<>();
		Configuration selectionConfiguration = new Configuration();
		Configuration groupByConfiguration = new Configuration();
		Configuration aggregationConfiguration = new Configuration();
		Configuration projectionConfiguration = new Configuration();

		List<String> list = Lists.newArrayList(Splitter.on('\n').trimResults().omitEmptyStrings().split(query));
		for (String s : list) {
			System.out.println(s);
		}
		System.out.println("---------");
		getProjectionConfiguration(list.get(0));

		return 0;
	}

	private Configuration getProjectionConfiguration(String queryPart) {
		Configuration projectionConfiguration = new Configuration();
		List<String> queryParts = Lists.newArrayList(Splitter.on(CharMatcher.anyOf(" ").or(CharMatcher.anyOf(", ")))
				.trimResults().omitEmptyStrings().split(queryPart));
		StringBuilder sb = new StringBuilder();
		for (int i = 1; i < queryParts.size(); i++) {
			sb.append(queryParts.get(i));
			sb.append(", ");
		}
		sb.delete(sb.length() - 2, sb.length());
		System.out.println(sb.toString());

		return projectionConfiguration;
	}

	private int runJob(String[] args, TezConfiguration tezConf, TezClient tezClient) throws TezException, IOException {

		// Name der Relationen aus args[] entnehmen
		String r1 = "artikel";
		String r2 = "liegen";

		// DataSource und DataSinks erzeugen
		DataSourceDescriptor dataSource1 = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, "./tables/" + r1).build();
		DataSourceDescriptor schemeSource1 = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, "./tables/" + r1 + ".scheme")
				.build();
		DataSourceDescriptor dataSource2 = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, "./tables/" + r2).build();
		DataSourceDescriptor schemeSource2 = MRInput
				.createConfigBuilder(new Configuration(tezConf), TextInputFormat.class, "./tables/" + r2 + ".scheme")
				.build();
		DataSinkDescriptor dataSink = MROutput
				.createConfigBuilder(new Configuration(tezConf), TextOutputFormat.class, "./tables/output").build();

		// Configuration-Objekte für jeweilige Prozessoren erzeugen
		// ---------------------------------------------------------
		// Join
		String joinAttribute = "artikel.ArtNr = liegen.ArtNr";
		Configuration joinConf = new Configuration();
		joinConf.set("JoinAttribute", joinAttribute);
		UserPayload joinParameter = TezUtils.createUserPayloadFromConf(joinConf);
		// Selektion
		String selectionPredicate = "artikel.ArtNr != 1003";
		Configuration selectionConf = new Configuration();
		selectionConf.set("SelectionPredicate", selectionPredicate);
		UserPayload selectionParameter = TezUtils.createUserPayloadFromConf(selectionConf);
		// GroupBy
		String groupByAttributes = "artikel.ArtNr, artikel.ArtName";
		Configuration groupByConf = new Configuration();
		groupByConf.set("GroupByAttributes", groupByAttributes);
		UserPayload groupByParameter = TezUtils.createUserPayloadFromConf(groupByConf);
		// AggregateProjectionProcessor
		String aggregateFunctions = "count(liegen.LagerNr), sum(liegen.Bestand)";
		Configuration aggregationConf = new Configuration();
		aggregationConf.set("AggregateFunctions", aggregateFunctions);
		UserPayload aggregationParameter = TezUtils.createUserPayloadFromConf(aggregationConf);
		// Projektion
		String projection = "artikel.ArtNr, artikel.ArtName, count(liegen.LagerNr), sum(liegen.Bestand)";
		Configuration projectionConf = new Configuration();
		projectionConf.set("Projection", projection);
		UserPayload projectionParameter = TezUtils.createUserPayloadFromConf(projectionConf);

		// Knoten erzeugen. Prädikat und Projectionattribute über UserPayload
		// als String an SelectionProcessor und ProjectionProcessor
		// weiterreichen
		Vertex v1 = Vertex.create(ARTIKELSCHEMEPROCESSOR, ProcessorDescriptor.create(SchemeProcessor.class.getName()));
		Vertex v2 = Vertex.create(ARTIKELTABLEPROCESSOR, ProcessorDescriptor.create(TableProcessor.class.getName()));
		Vertex v3 = Vertex.create(LIEGENSCHEMEPROCESSOR, ProcessorDescriptor.create(SchemeProcessor.class.getName()));
		Vertex v4 = Vertex.create(LIEGENTABLEPROCESSOR, ProcessorDescriptor.create(TableProcessor.class.getName()));
		Vertex v5 = Vertex.create(HASHJOINPROCESSOR,
				ProcessorDescriptor.create(HashJoinProcessor.class.getName()).setUserPayload(joinParameter), 1);
		Vertex v6 = Vertex.create(SELECTIONPROCESSOR,
				ProcessorDescriptor.create(SelectionProcessor.class.getName()).setUserPayload(selectionParameter), 1);
		Vertex v7 = Vertex.create(GROUPBYPROCESSOR,
				ProcessorDescriptor.create(GroupByProcessor.class.getName()).setUserPayload(groupByParameter), 1);
		Vertex v8 = Vertex.create(AGGREGATIONPROCESSOR,
				ProcessorDescriptor.create(AggregationProcessor.class.getName()).setUserPayload(aggregationParameter),
				1);
		Vertex v9 = Vertex.create(PROJECTIONPROCESSOR,
				ProcessorDescriptor.create(ProjectionProcessor.class.getName()).setUserPayload(projectionParameter), 1);

		v1.addDataSource(ARTIKELSCHEMEINPUT, schemeSource1);
		v2.addDataSource(ARTIKELDATAINPUT, dataSource1);
		v3.addDataSource(LIEGENSCHEMEINPUT, schemeSource2);
		v4.addDataSource(LIEGENDATAINPUT, dataSource2);
		v9.addDataSink(RESULTOUTPUT, dataSink);

		// Edges erzeugen:
		UnorderedKVEdgeConfig eConfig1 = UnorderedKVEdgeConfig.newBuilder(Text.class.getName(), Text.class.getName())
				.setFromConfiguration(tezConf).build();
		Edge e1 = Edge.create(v1, v2, eConfig1.createDefaultBroadcastEdgeProperty());
		Edge e2 = Edge.create(v3, v4, eConfig1.createDefaultBroadcastEdgeProperty());
		UnorderedKVEdgeConfig eConfig2 = UnorderedKVEdgeConfig
				.newBuilder(Tuple.class.getName(), NullWritable.class.getName()).setFromConfiguration(tezConf).build();
		Edge e3 = Edge.create(v2, v5, eConfig2.createDefaultBroadcastEdgeProperty());
		Edge e4 = Edge.create(v4, v5, eConfig2.createDefaultBroadcastEdgeProperty());
		Edge e5 = Edge.create(v5, v6, eConfig2.createDefaultBroadcastEdgeProperty());
		Edge e6 = Edge.create(v6, v7, eConfig2.createDefaultBroadcastEdgeProperty());
		OrderedPartitionedKVEdgeConfig eConfig3 = OrderedPartitionedKVEdgeConfig
				.newBuilder(Text.class.getName(), Tuple.class.getName(), HashPartitioner.class.getName())
				.setFromConfiguration(tezConf).build();
		Edge e7 = Edge.create(v7, v8, eConfig3.createDefaultEdgeProperty());
		Edge e8 = Edge.create(v8, v9, eConfig2.createDefaultBroadcastEdgeProperty());

		// Graph aufbauen und starten
		DAG dag = DAG.create("dag");
		dag.addVertex(v1).addVertex(v2).addVertex(v3).addVertex(v4).addVertex(v5).addVertex(v6).addVertex(v7)
				.addVertex(v8).addVertex(v9).addEdge(e1).addEdge(e2).addEdge(e3).addEdge(e4).addEdge(e5).addEdge(e6)
				.addEdge(e7).addEdge(e8);

		System.out.println("Start DAG");
		try {
			DAGClient dagClient = tezClient.submitDAG(dag);
			DAGStatus dagStatus;
			dagStatus = dagClient.waitForCompletionWithStatusUpdates(null);
			System.out.println("DAG diagnostics: " + dagStatus.getDiagnostics());
		} catch (InterruptedException ex) {
			ex.printStackTrace();
		}

		return 0;
	}

	public static void main(String[] args) throws Exception {
		ToolRunner.run(new Configuration(), new App(), args);
	}
}
