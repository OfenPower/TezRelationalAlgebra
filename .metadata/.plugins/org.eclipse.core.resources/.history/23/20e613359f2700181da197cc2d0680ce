package de.bachd.bigdata.tez;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.tez.client.TezClient;
import org.apache.tez.dag.api.DAG;
import org.apache.tez.dag.api.TezConfiguration;
import org.apache.tez.dag.api.TezException;
import org.apache.tez.dag.api.client.DAGClient;
import org.apache.tez.dag.api.client.DAGStatus;
import org.apache.tez.runtime.library.api.TezRuntimeConfiguration;

public class Main extends Configured implements Tool {

	public static void main(String[] args) throws Exception {
		if (args.length != 1) {
			System.out.println("Too many arguments! Enter only one .sql file (e.g. query01.sql)");
		} else {
			ToolRunner.run(new Configuration(), new Main(), args);
		}
	}

	@Override
	public int run(String[] args) throws Exception {
		// Tez lokal aufsetzen
		TezConfiguration tezConf = new TezConfiguration();
		tezConf.setBoolean(TezConfiguration.TEZ_LOCAL_MODE, true);
		tezConf.set("fs.default.name", "file:///");
		tezConf.setBoolean(TezRuntimeConfiguration.TEZ_RUNTIME_OPTIMIZE_LOCAL_FETCH, true);
		// tezConf.set(TezRuntimeConfiguration.TEZ_RUNTIME_KEY_CLASS,
		// Tuple.class.getName());
		// tezConf.set(TezRuntimeConfiguration.TEZ_RUNTIME_VALUE_CLASS,
		// NullWritable.class.getName());

		// Query aus angegebener Datei in einen String auslesen
		String query = readQueryFromFile(args[0]);

		// DAG aus String erzeugen
		DAGBuilder dagBuilder = new DAGBuilder();
		DAG dag = dagBuilder.buildDAGFromString(query, tezConf);
		// DAG dag2 = DAGTestBuilder.buildFullDAG(tezConf);

		// TezClient starten
		TezClient tezClient = TezClient.create("TezClient", tezConf);
		tezClient.start();

		// return 0;
		return runDAGJob(dag, tezConf, tezClient);
	}

	private int runDAGJob(DAG dag, TezConfiguration tezConf, TezClient tezClient) throws TezException, IOException {
		System.out.println("Start DAG");
		try {
			DAGClient dagClient = tezClient.submitDAG(dag);
			DAGStatus dagStatus;
			dagStatus = dagClient.waitForCompletionWithStatusUpdates(null);
			System.out.println("DAG diagnostics: " + dagStatus.getDiagnostics());
		} catch (InterruptedException ex) {
			ex.printStackTrace();
		}

		return 0;
	}

	private String readQueryFromFile(String fileName) throws FileNotFoundException, IOException {
		StringBuilder sb = new StringBuilder();
		String fullFileName = "./querys/" + fileName;
		try (FileReader fin = new FileReader(new File(fullFileName)); BufferedReader br = new BufferedReader(fin)) {
			String line;
			while ((line = br.readLine()) != null) {
				sb.append(line + "\n");
			}
		}
		return sb.toString();
	}

}
