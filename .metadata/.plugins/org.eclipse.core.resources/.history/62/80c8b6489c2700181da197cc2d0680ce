package de.bachd.bigdata.tez;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.io.NullWritable;
import org.apache.hadoop.io.Text;
import org.apache.tez.common.TezUtils;
import org.apache.tez.dag.api.UserPayload;
import org.apache.tez.mapreduce.processor.SimpleMRProcessor;
import org.apache.tez.runtime.api.ProcessorContext;
import org.apache.tez.runtime.library.api.KeyValueReader;
import org.apache.tez.runtime.library.api.KeyValueWriter;

import com.google.common.base.Splitter;

/**
 * Erhält Tuple und projeziert diese auf angegebene Attribute. Schreibt Die
 * Ergebniswerte als Datei raus.
 * 
 * ToDo: Auf "*" prüfen!
 * 
 */
public class ProjectionProcessor extends SimpleMRProcessor {

	private List<String> projectionList = new ArrayList<>();

	public ProjectionProcessor(ProcessorContext context) {
		super(context);
	}

	@Override
	public void run() throws Exception {
		if (projectionList.contains("*")) {
			projectAllValues();
		} else {
			projectCertainValues();
		}
	}

	private void projectAllValues() throws Exception {
		// SELECT * FROM
		KeyValueReader kvReader = (KeyValueReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter tableWriter = (KeyValueWriter) getOutputs().get("OutputTable").getWriter();
		KeyValueWriter schemeWriter = (KeyValueWriter) getOutputs().get("OutputScheme").getWriter();
		List<String> attributeNames = new ArrayList<>();
		List<String> attributeDomains = new ArrayList<>();
		while (kvReader.next()) {
			Tuple tuple = (Tuple) kvReader.getCurrentKey();
			// Schema einmalig merken (wird am Ende rausgeschrieben)
			boolean schemeRead = false;
			if (!schemeRead) {
				attributeNames = tuple.getAttributeNames();
				attributeDomains = tuple.getAttributeDomains();
				schemeRead = true;
			}
			// Alle Values rausschreiben
			List<String> valueList = tuple.getAttributeValues();
			StringBuilder values = new StringBuilder("");
			for (int i = 0; i < valueList.size(); i++) {
				values.append(valueList.get(i)).append("\t");
			}
			tableWriter.write(new Text(values.toString()), NullWritable.get());
		}

		// Ergebnisschema rausschreiben
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < attributeNames.size(); i++) {
			sb.append(attributeNames.get(i) + ":" + attributeDomains.get(i) + "\t");
		}
		schemeWriter.write(new Text(sb.toString()), NullWritable.get());
	}

	private void projectCertainValues() throws Exception {
		// SELECT a, b FROM
		KeyValueReader kvReader = (KeyValueReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter tableWriter = (KeyValueWriter) getOutputs().get("OutputTable").getWriter();
		KeyValueWriter schemeWriter = (KeyValueWriter) getOutputs().get("OutputScheme").getWriter();
		List<String> projectedAttributeNames = new ArrayList<>();
		List<String> projectedAttributeDomains = new ArrayList<>();
		while (kvReader.next()) {
			Tuple tuple = (Tuple) kvReader.getCurrentKey();

			/* Variablen zur Schemaspeicherung */
			List<String> attributeNames = new ArrayList<>();
			List<String> attributeDomains = new ArrayList<>();
			boolean schemeRead = false;
			if (!schemeRead) {
				attributeNames = tuple.getAttributeNames();
				attributeDomains = tuple.getAttributeDomains();
				schemeRead = true;
			}
			/* Variablen zur Schemaspeicherung */
			Map<String, String> columnMap = tuple.getColumnStringMap();
			StringBuilder values = new StringBuilder("");
			for (int i = 0; i < projectionList.size(); i++) {
				// Projektionsattribut aus Liste holen
				String column = projectionList.get(i);
				// Nur Value für dieses Attribut rausschreiben
				values.append(columnMap.get(column)).append("\t");
				// Schema projezieren
				projectedAttributeNames.add(attributeNames.get(i));
				projectedAttributeDomains.add(attributeDomains.get(i));
			}
			tableWriter.write(new Text(values.toString()), NullWritable.get());
		}

		// Ergebnisschema rausschreiben
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < attributeNames.size(); i++) {
			sb.append(attributeNames.get(i) + ":" + attributeDomains.get(i) + "\t");
		}
		schemeWriter.write(new Text(sb.toString()), NullWritable.get());
	}

	@Override
	public void initialize() throws IOException {
		System.out.println("Initialize ProjectionProcessor");
		// UserPayload in Configuration konvertieren und Projektionsattribute
		// holen
		UserPayload up = getContext().getUserPayload();
		Configuration conf = TezUtils.createConfFromUserPayload(up);
		String projection = conf.get("Projection");
		// Projektionsattribute splitten und einzeln der Projektionsliste
		// hinzufügen.
		Iterable<String> projItr = Splitter.on(',').trimResults().omitEmptyStrings().split(projection);
		for (String s : projItr) {
			projectionList.add(s);
		}
		// DEBUG Projektionsattribute anzeigen
		System.out.println("Projektion auf: " + projection);
	}

	private void backup() throws Exception {
		KeyValueReader kvReader = (KeyValueReader) getInputs().values().iterator().next().getReader();
		KeyValueWriter tableWriter = (KeyValueWriter) getOutputs().get("OutputTable").getWriter();
		KeyValueWriter schemeWriter = (KeyValueWriter) getOutputs().get("OutputScheme").getWriter();
		while (kvReader.next()) {
			Tuple tuple = (Tuple) kvReader.getCurrentKey();
			// Schema einmalig merken (wird am Ende rausgeschrieben)
			if (!schemeRead) {
				attributeNames = tuple.getAttributeNames();
				attributeDomains = tuple.getAttributeDomains();
				schemeRead = true;
			}
			Text projectedValues = null;
			// SELECT * FROM
			// tuple.printColumnValues();
			if (projectionList.contains("*")) {
				// Alle Values rausschreiben
				List<String> valueList = tuple.getAttributeValues();
				StringBuilder values = new StringBuilder("");
				for (int i = 0; i < valueList.size(); i++) {
					values.append(valueList.get(i)).append("\t");
				}
				projectedValues = new Text(values.toString());
			} else {
				// SELECT a, b FROM
				// tuple.printColumnValues();
				Map<String, String> columnMap = tuple.getColumnStringMap();
				StringBuilder values = new StringBuilder("");
				for (int i = 0; i < projectionList.size(); i++) {
					// Projektionsattribut aus Liste holen
					String column = projectionList.get(i);
					// Nur Value für dieses Attribut rausschreiben
					values.append(columnMap.get(column)).append("\t");
				}
				// values.delete(values.length() - 2, values.length());
				projectedValues = new Text(values.toString());

			}
			// Projezierte Tupel herausschreiben
			tableWriter.write(projectedValues, NullWritable.get());
		}

		// Ergebnisschema rausschreiben
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < attributeNames.size(); i++) {
			sb.append(attributeNames.get(i) + ":" + attributeDomains.get(i) + "\t");
		}
		schemeWriter.write(new Text(sb.toString()), NullWritable.get());
	}

}
